{"version":3,"sources":["logo.svg","DisplayCard.js","Home.js","header-container.js","displayDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DisplayCard","display","style","color","Header","backgroundColor","name","to","display_id","key","Img","variant","height","src","image","Home","props","profiles","createcards","class","fluid","className","visibility","md","Item","header","DisplayDetail","title","profile_links","profile_picture","link_description","description","useParams","profile","profInfo","profileLengths","length","profileInfo","info","link","linkDesc","desc","i","push","organizeProfileInfo","width","Object","values","map","href","App","Container","Row","noGutters","Col","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAAAA,EAAOC,QAAU,IAA0B,kC,4KCiB5BC,MAZf,SAAqBC,GACjB,OACI,kBAAC,IAAD,CAASC,MAAS,CAAEC,MAAO,aACvB,kBAAC,IAAQC,OAAT,CAAgBF,MAAQ,CAACG,gBAAiB,YAAaJ,EAAQD,YAAYM,MAC3E,kBAAC,IAAD,CAAMC,GAAI,YAAcN,EAAQD,YAAYQ,WAAaC,IAAKR,EAAQD,YAAYQ,YAC9E,kBAAC,IAAQE,IAAT,CAAaC,QAAQ,SAASC,OAAO,QAAQC,IAAKZ,EAAQD,YAAYc,W,MCyDvEC,MAlCf,SAAcC,GACd,IAAIC,EA3BJ,WAGI,IAAIA,EAAW,GAmBf,OAHAA,EAAS,GAfE,CACPT,WAAa,IACbF,KAAO,SACPQ,MAAQ,eAaZG,EAAS,GAXE,CACPT,WAAY,IACZF,KAAO,SACPQ,MAAQ,oBASZG,EAAS,GAPC,CACNT,WAAY,IACZF,KAAO,WACPQ,MAAQ,gBAKLG,EAKIC,GAEf,OAEI,yBAAKC,MAAM,WACX,kBAAC,IAAD,CAAcA,MAAM,aAAaC,OAAK,EAACC,UAAU,OACjD,wBAAIA,UAAU,yBAAd,oBAGA,yBAAKR,IAAO,4CAA6CX,MAAQ,CAAEoB,WAAW,SAAUV,OAAO,WAE3F,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQW,GAAG,KACP,kBAAC,IAAaC,KAAd,KAAmB,kBAAC,EAAD,CAAaxB,YAAaiB,EAAS,OAE1D,kBAAC,IAAD,CAAQM,GAAG,KACX,kBAAC,IAAaC,KAAd,KAAmB,kBAAC,EAAD,CAAaxB,YAAaiB,EAAS,OAEtD,kBAAC,IAAD,CAAQM,GAAG,KACX,kBAAC,IAAaC,KAAd,KAAmB,kBAAC,EAAD,CAAaxB,YAAaiB,EAAS,QAG1D,yBAAKJ,IAAO,4CAA6CX,MAAQ,CAAEoB,WAAW,SAAUV,OAAO,cCnCxFa,MAdf,WAEA,OACI,kBAAC,IAAD,OC0DW,SAASC,EAAcV,GAEtC,IAAIC,EA/DJ,WAGI,IAAIA,EAAW,GAiCf,OAHAA,EAAS,GA7BE,CACPT,WAAa,IACbmB,MAAO,yBACPC,cAAe,CAAC,iCAAkC,uDAClDC,gBAAiB,kBACjBC,iBAAkB,CAAC,YAAa,YAChCC,YAAa,CAAC,oHACV,6FACJzB,KAAO,SACPQ,MAAQ,eAqBZG,EAAS,GAnBE,CACPT,WAAY,IACZF,KAAO,SACPuB,gBAAiB,uBACjBD,cAAe,CAAC,IAChBE,iBAAkB,CAAC,IACnBC,YAAa,CAAC,oHACdjB,MAAQ,oBAaZG,EAAS,GAXC,CACNT,WAAY,IACZF,KAAO,WACPuB,gBAAiB,eACjBD,cAAe,CAAC,uDAChBE,iBAAkB,CAAC,uBACnBC,YAAa,CAAC,gKACdjB,MAAQ,gBAKLG,EA2BIC,GACTjB,EAAY+B,cAAZ/B,QACFgC,EAAUhB,EAAShB,GACnBiC,EA3BJ,SAA6BD,GASzB,IAPJ,IAAIE,EAAiBF,EAAQL,cAAcQ,OACnCC,EAAc,GACdC,EAAO,CACPC,KAAO,GACPC,SAAW,GACXC,KAAO,IAEHC,EAAI,EAAGA,EAAIP,EAAgBO,IAC/BJ,EAAKC,KAAON,EAAQL,cAAcc,GAClCJ,EAAKE,SAAWP,EAAQH,iBAAiBY,GACzCJ,EAAKG,KAAOR,EAAQF,YAAYW,GAChCL,EAAYM,KAAK,CACbJ,KAAON,EAAQL,cAAcc,GACjCF,SAAWP,EAAQH,iBAAiBY,GACpCD,KAAOR,EAAQF,YAAYW,KAG/B,OAAOL,EAQIO,CAAoBX,GACnC,OACI,kBAAC,IAAD,KACG,yBAAKpB,IAAO,4CAA6CX,MAAQ,CAAEoB,WAAW,SAAUV,OAAO,WAC1F,wBAAIS,UAAU,eAAeY,EAAQN,OAEzC,kBAAC,IAAD,CAAQzB,MAAO,CAACG,gBAAiB,YAC7B,kBAAC,IAAD,KACI,yBAAKQ,IAAMoB,EAAQJ,gBAAiB3B,MAAO,CAACU,OAAO,QAAQiC,MAAM,YAErE,kBAAC,IAAD,KACCC,OAAOC,OAAOb,GAAUc,KAAI,SAACjB,GAC1B,OACI,kBAAC,IAAD,KACA,kBAAC,IAAQ3B,OAAT,KAAgB,uBAAG6C,KAAMlB,EAAYQ,KAAM9B,IAAKR,GAAU8B,EAAYS,WACtE,6BACA,2BAAIT,EAAYU,YAO5B,yBAAK5B,IAAO,4CAA6CX,MAAQ,CAAEoB,WAAW,SAAUV,OAAO,YCtCxFsC,MA9Cf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,cACf,kBAAC8B,EAAA,EAAD,CAAW/B,OAAK,EAAEC,UAAU,2BAC5B,kBAAC+B,EAAA,EAAD,CAAKC,WAAS,EAAChC,UAAU,uCACrB,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,aACf,kBAAC,EAAD,QAGA,kBAACiC,EAAA,EAAD,CAAK/B,GAAG,MACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgC,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,qBACR,kBAAC7B,EAAD,OAEJ,kBAAC,IAAD,CAAO6B,KAAK,KACV,kBAAC,EAAD,aCnBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aee9dac7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport * as bs from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n\nfunction DisplayCard(display) {\n    return (\n        <bs.Card style = {{ color: \"darkcyan\"}}>\n            <bs.Card.Header style ={{backgroundColor: \"#cccccc\"}}>{display.DisplayCard.name}</bs.Card.Header>\n            <Link to={\"/display/\" + display.DisplayCard.display_id } key={display.DisplayCard.display_id}>\n                <bs.Card.Img variant=\"bottom\" height=\"200px\" src={display.DisplayCard.image}  />\n            </Link>\n        </bs.Card>\n    )\n}\n//<Link to={\"/display/\" + displayCard.display_id } key={displayCard.display_id}></Link>\n//</Link>\nexport default DisplayCard;","import React from 'react'\nimport * as bs from 'react-bootstrap'\nimport DisplayCard from './DisplayCard'\nimport { useParams } from 'react-router-dom';\nimport './Home.scss';\n//import AppContext from './context';\n\nfunction createcards(){\n    //it's been a fresh while so I'm going to use this \n    //to create the objects for my cards\n    let profiles = [];\n    let obj1 = {\n        display_id : \"0\",\n        name : \"github\",\n        image : \"/Github.png\"\n    };\n    let obj2 = {\n        display_id: \"1\",\n        name : \"Resume\",\n        image : \"/ResumeImage.jpg\"\n    }\n    let obj3 ={\n        display_id: \"2\",\n        name : \"About me\",\n        image : \"/aboutMe.png\"\n    }\n    profiles[0] = obj1;\n    profiles[1] = obj2;\n    profiles[2] = obj3;\n    return profiles;\n}\n\n\nfunction Home(props){\nlet profiles = createcards();\n\nreturn(\n    \n    <div class=\"display\">\n    <bs.Container class=\"containter\" fluid className=\"p-0\">\n    <h1 className=\"my-4 mx-4 text-center\">Mitchell Johnson</h1>\n    \n  \n    <img src = {\"/Screen Shot 2021-02-05 at 7.39.58 PM.png\"} style= {{ visibility:\"hidden\", height:\"500px\"}} />\n    \n        <bs.Row >\n            <bs.Col md=\"4\" >\n                <bs.ListGroup.Item><DisplayCard DisplayCard={profiles[0]} /></bs.ListGroup.Item>\n            </bs.Col>\n            <bs.Col md=\"4\">\n            <bs.ListGroup.Item><DisplayCard DisplayCard={profiles[1]} /></bs.ListGroup.Item>\n            </bs.Col>\n            <bs.Col md=\"4\">\n            <bs.ListGroup.Item><DisplayCard DisplayCard={profiles[2]} /></bs.ListGroup.Item>\n            </bs.Col>\n        </bs.Row>\n        <img src = {\"/Screen Shot 2021-02-05 at 7.39.58 PM.png\"} style= {{ visibility:\"hidden\", height:\"550px\"}} />\n    </bs.Container>\n    </div>\n   \n)\n\n\n\n\n}\n\nexport default Home;","import React from 'react'\nimport * as bs from 'react-bootstrap'\nimport DisplayCard from './DisplayCard'\nimport { useParams } from 'react-router-dom';\nimport './Home.scss';\n//import picture from \"/Screen Shot 2021-02-05 at 7.39.58 PM.png\"\n\nfunction header(){\n\nreturn(\n    <bs.Container>\n       \n    \n        \n    </bs.Container>\n)\n\n\n\n}\n\nexport default header;","import React from 'react';\nimport * as bs from 'react-bootstrap';\n//import AppContext from './context'\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {useParams} from \"react-router-dom\";\n\n\nfunction createcards(){\n    //it's been a fresh while so I'm going to use this \n    //to create the objects for my cards\n    let profiles = [];\n    let obj1 = {\n        display_id : \"0\",\n        title: \"github and other sites\",\n        profile_links: [\"https://github.com/Mitchell996\", \"https://www.figma.com/files/user/771537126370303213\"],\n        profile_picture: \"/GithubFork.png\",\n        link_description: [\"my github\", \"my figma\"],\n        description: [\"What you'll find on your github is some javascript, a few react projects, and the example app I made, family Map.\",\n            \"On my Figma, you'll find a few designs that I have created for class or personal projects\"],\n        name : \"github\",\n        image : \"/Github.png\"\n    };\n    let obj2 = {\n        display_id: \"1\",\n        name : \"Resume\",\n        profile_picture: \"/Resume Jan 2021.png\",\n        profile_links: [\"\"],\n        link_description: [\"\"],\n        description: [\"you should be able to see my full Resume, if not click on about me and my LinkedIn profile should be accessible.\"],\n        image : \"/ResumeImage.jpg\"\n    }\n    let obj3 ={\n        display_id: \"2\",\n        name : \"About me\",\n        profile_picture: \"/aboutMe.png\",\n        profile_links: [\"https://www.linkedin.com/in/mitchell-a-johnson-byu/\"],\n        link_description: [\"my linkedin account\"],\n        description: [\"My name is Mitchell Johnson, I'm from Santa Clarita, California.  I currently attend BYU getting a degree in Information Systems(est. graduation april 2021)\"],\n        image : \"/aboutMe.png\"\n    }\n    profiles[0] = obj1;\n    profiles[1] = obj2;\n    profiles[2] = obj3;\n    return profiles;\n}\n\nfunction organizeProfileInfo(profile){\n\nlet profileLengths = profile.profile_links.length;\n    let profileInfo = []\n    let info = {\n        link : \"\",\n        linkDesc : \"\",\n        desc : \"\"\n    };\n    for(let i = 0; i < profileLengths; i++){\n        info.link = profile.profile_links[i];\n        info.linkDesc = profile.link_description[i];\n        info.desc = profile.description[i];\n        profileInfo.push({\n            link : profile.profile_links[i],\n        linkDesc : profile.link_description[i],\n        desc : profile.description[i]\n        });\n    }\n    return profileInfo;\n}\n\nexport default function DisplayDetail(props){\n//console.log(\"what's display? \" , displayDetail);\nlet profiles = createcards();\nlet { display } = useParams();\nlet profile = profiles[display];\nlet profInfo = organizeProfileInfo(profile);\nreturn(\n    <bs.Container >\n       <img src = {\"/Screen Shot 2021-02-05 at 7.39.58 PM.png\"} style= {{ visibility:\"hidden\", height:\"500px\"}} />\n            <h3 className=\"text-center\">{profile.title}</h3>\n        \n        <bs.Row style={{backgroundColor: \"#7c8256\"}}>\n            <bs.Col>\n                <img src ={profile.profile_picture} style={{height:\"400px\",width:\"600px\" }}/>\n            </bs.Col>\n            <bs.Col>\n            {Object.values(profInfo).map((description) => {\n                return (\n                    <bs.Card >\n                    <bs.Card.Header><a href={description.link} key={display}>{description.linkDesc}</a></bs.Card.Header>\n                    <br></br>\n                    <p>{description.desc}</p>\n                    </bs.Card>\n                )\n            }    )}\n            </bs.Col>\n        </bs.Row>\n\n        <img src = {\"/Screen Shot 2021-02-05 at 7.39.58 PM.png\"} style= {{ visibility:\"hidden\", height:\"550px\"}} />\n\n    </bs.Container>\n)\n\n}\n\n//export default displayDetail;\n\n\n/*\n\n{Object.values(organizedCampaigns).map((campaign) => {\n                            return (<bs.ListGroup key={campaign[0] + count++} horizontal>\n                                <bs.Col md=\"3\">\n                                    <bs.ListGroup.Item sm={3} key={campaign[0].campaign_id}> <CampaignCard campaign={campaign[0]} /> </bs.ListGroup.Item>\n                                </bs.Col>\n                                {campaign.length > 1 ?\n                                    (<bs.Col md=\"3\">\n                                        <bs.ListGroup.Item sm={3} key={campaign[1].campaign_id} ><CampaignCard campaign={campaign[1]} /></bs.ListGroup.Item>\n                                    </bs.Col>) : <div></div>}\n                                {campaign.length > 2 ?\n                                    (<bs.Col md=\"3\">\n                                        <bs.ListGroup.Item sm={3} key={campaign[2].campaign_id} ><CampaignCard campaign={campaign[2]} /></bs.ListGroup.Item>\n                                    </bs.Col>) : <div></div>}\n                                {campaign.length > 3 ?\n                                    (<bs.Col md=\"3\">\n                                        <bs.ListGroup.Item sm={3} key={campaign[3].campaign_id} ><CampaignCard campaign={campaign[3]} /></bs.ListGroup.Item>\n                                    </bs.Col>) : <div></div>}\n                            </bs.ListGroup>)\n                        })}\n\n\n*/","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Home from './Home';\nimport HeaderContainer from './header-container'\nimport displayCard from './DisplayCard';\nimport DisplayDetail from './displayDetail'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"siteborder\">\n      <Container fluid  className=\"p-0  d-flex flex-column\">\n      <Row noGutters className=\"flex-grow-0 flex-shrink-0 shadow-sm\">\n          <Col className=\"px-3 py-8\">\n          <HeaderContainer />\n          </Col>\n        </Row>\n          <Col md=\"12\">\n              <Switch>\n                <Route path=\"/home\">\n                  <Home />\n                </Route>\n                <Route path=\"/display/:display\">\n                    <DisplayDetail />\n                </Route>\n                <Route path=\"/\">\n                  <Home />\n                </Route>\n\n              </Switch>\n          </Col>\n        \n        </Container>\n        </div>\n    </Router>\n  );\n}\n/*\n<Row noGutters className=\"flex-grow-1\">\n</Row> \n<Row noGutters className=\"flex-grow-0 flex-shrink-0 shadow-sm\">\n          <Col className=\"px-3 py-2\">\n            \n          </Col>\n        </Row>\n<HeaderContainer />\n<Route path=\"/resume\">\n                  <Resume />\n                </Route>\n                <Route path=\"designs\">\n                    <Design />\n                </Route>*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}